{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"\\nfor i in range(0,inp):\\n    inp1 = raw_input()\\n    lst =  inp1.split(' ')\\n    if lst[0] == 'S':\\n        f1(lst)\\n    else:\\n        f2(lst)\\n\""
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def f1(lst):\n",
    "    d.append(int(lst[1]))\n",
    "    lst2 = lst[2].split('.')\n",
    "    lst3 = lst[3].split('.')\n",
    "    if len(lst2) == 2:\n",
    "        p.append(int(lst2[0]))\n",
    "        c.append(int(lst2[1]))\n",
    "    else:\n",
    "        p.append(int(lst2[0]))\n",
    "        c.append(-1)\n",
    "    if len(lst3) == 2:\n",
    "        s.append(int(lst3[0]))\n",
    "        r.append(int(lst3[1]))\n",
    "    else:\n",
    "        s.append(int(lst3[0]))\n",
    "        r.append(-1)\n",
    "        \n",
    "def f2(lst):\n",
    "    p1 = []\n",
    "    c1 = []\n",
    "    s1 = []\n",
    "    r1 = []\n",
    "    lst1 = lst[1].split('.')\n",
    "    lst2 = lst[2].split('.')\n",
    "    lst3 = lst[3].split('.')\n",
    "    if len(lst1) == 2:\n",
    "        d1 = int(lst1[0])\n",
    "        d2 = int(lst1[1])\n",
    "    else: \n",
    "        d1 = int(lst1[0])\n",
    "        d2 = int(lst1[0])\n",
    "    \n",
    "    if len(lst2) == 2:\n",
    "        p1 = int(lst2[0])\n",
    "        c1 = int(lst2[1])\n",
    "    else: \n",
    "        p1 = int(lst2[0])\n",
    "        c1 = int(-1)\n",
    "    if len(lst3) == 2:\n",
    "        s1 = int(lst3[0])\n",
    "        r1 = int(lst3[1])\n",
    "    else: \n",
    "        s1 = int(lst3[0])\n",
    "        r1 = int(-1)\n",
    "    #print d1,d2,p1,c1,s1,r1\n",
    "    f3(d1,d2,p1,c1,s1,r1)\n",
    "\n",
    "def f3(d1,d2,p1,c1,s1,r1):\n",
    "    count = 0 \n",
    "    for enu in range(0,len(d)):\n",
    "        if ((d[enu] >= d1) & (d[enu] <= d2)) | (d1 == -1):\n",
    "            if (p1 == -1) | ((p[enu] == p1) & (c1 ==-1)) | ((p[enu] == p1) & (c[enu] == c1)):\n",
    "                if (s1 == -1) | ((s[enu] == s1) & (r1 ==-1)) | ((s[enu] == s1) & (r[enu] == r1)):\n",
    "                    count = count + 1\n",
    "    \n",
    "    return count \n",
    "            \n",
    "        \n",
    "    \n",
    "#inp = int(raw_input())\n",
    "\n",
    "d = []\n",
    "p = []\n",
    "c = []\n",
    "s = []\n",
    "r = []\n",
    "\"\"\"\n",
    "for i in range(0,inp):\n",
    "    inp1 = raw_input()\n",
    "    lst =  inp1.split(' ')\n",
    "    if lst[0] == 'S':\n",
    "        f1(lst)\n",
    "    else:\n",
    "        f2(lst)\n",
    "\"\"\"     \n",
    "            \n",
    "            \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1000\n",
      "S 1 1.3 2.5\n",
      "S 1 1.2 2.6\n",
      "S 2 2 3.5\n",
      "S 2 2 3\n",
      "S 2 2 -1\n",
      "S 2 -1 -1\n",
      "S 2 -1 3.5\n",
      "S 4 -1 3.5\n",
      "S 2 2.5 3.5\n",
      "Q -1 5 20\n",
      "0 1 0 0\n",
      "1\n",
      "Q -1 5 20.1\n",
      "0\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-97-106502d6bcdf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    300\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    301\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0minp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 302\u001b[0;31m     \u001b[0minp1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mraw_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    303\u001b[0m     \u001b[0mlst\u001b[0m \u001b[0;34m=\u001b[0m  \u001b[0minp1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m' '\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    304\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlst\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'S'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/ankitgupta/anaconda/lib/python2.7/site-packages/ipykernel/kernelbase.pyc\u001b[0m in \u001b[0;36mraw_input\u001b[0;34m(self, prompt)\u001b[0m\n\u001b[1;32m    703\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_ident\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    704\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_parent_header\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 705\u001b[0;31m             \u001b[0mpassword\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    706\u001b[0m         )\n\u001b[1;32m    707\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/ankitgupta/anaconda/lib/python2.7/site-packages/ipykernel/kernelbase.pyc\u001b[0m in \u001b[0;36m_input_request\u001b[0;34m(self, prompt, ident, parent, password)\u001b[0m\n\u001b[1;32m    733\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    734\u001b[0m                 \u001b[0;31m# re-raise KeyboardInterrupt, to truncate traceback\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 735\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyboardInterrupt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    736\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    737\u001b[0m                 \u001b[0;32mbreak\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "\n",
    "def fun1(lst):\n",
    "    \n",
    "    all_key =  lst[1]\n",
    "    day_key =  lst[1]\n",
    "    day_pr_key = lst[1]\n",
    "    day_pr_ct_key = lst[1]\n",
    "    day_st_key =  lst[1] \n",
    "    day_st_r_key = lst[1]\n",
    "    pr_key = ''\n",
    "    st_key = ''\n",
    "    pr_st_key = ''\n",
    "    pr_ct_st_key = ''\n",
    "    pr_ct_st_r_key = ''\n",
    "    st_r_key = ''\n",
    "    pr_st_r_key = ''\n",
    "    pr_ct_key = ''\n",
    "    day_pr_st_key = lst[1]\n",
    "    day_pr_ct_st_key = lst[1]\n",
    "    day_pr_st_r_key = lst[1]\n",
    "    \n",
    "    lst2 = lst[2].split('.')\n",
    "    lst3 = lst[3].split('.')\n",
    "    \n",
    "    #print lst2\n",
    "    \n",
    "    if len(lst2) == 2:\n",
    "        all_key = all_key  + lst2[0]+ lst2[1] \n",
    "        day_pr_key = day_pr_key + lst2[0]\n",
    "        day_pr_ct_key = day_pr_ct_key +  lst2[0]+ lst2[1]\n",
    "        pr_key = pr_key +  lst2[0]\n",
    "        pr_st_key =pr_st_key+lst2[0]\n",
    "        pr_ct_st_key = pr_ct_st_key  + lst2[0]+ lst2[1] \n",
    "        pr_ct_st_r_key = pr_ct_st_r_key +  lst2[0]+ lst2[1] \n",
    "        pr_st_r_key = pr_st_r_key + lst2[0]\n",
    "        pr_ct_key  = pr_ct_key + lst2[0]+ lst2[1]\n",
    "        day_pr_st_key = day_pr_st_key + lst2[0]\n",
    "        day_pr_ct_st_key = day_pr_ct_st_key + lst2[0]+ lst2[1]\n",
    "        day_pr_st_r_key = day_pr_st_r_key +  lst2[0]\n",
    "        \n",
    "    else:\n",
    "        #all_key = all_key  + lst2[0]+ lst2[1]\n",
    "        day_pr_key = day_pr_key + lst2[0]\n",
    "        #day_pr_ct_key = day_pr_ct_key +  lst2[0]+ lst2[1]\n",
    "        pr_key = pr_key +  lst2[0]\n",
    "        pr_st_key =pr_st_key+lst2[0]\n",
    "        #pr_ct_st_key = pr_ct_st_key  + lst2[0]+ lst2[1] \n",
    "        #pr_ct_st_r_key = pr_ct_st_r_key +  lst2[0]+ lst2[1] \n",
    "        pr_st_r_key = pr_st_r_key + lst2[0]\n",
    "        pr_ct_key  = pr_ct_key + lst2[0]\n",
    "        day_pr_st_key = day_pr_st_key + lst2[0]\n",
    "        day_pr_st_r_key = day_pr_st_r_key +  lst2[0]\n",
    "\n",
    "    if len(lst3) == 2:\n",
    "        all_key = all_key + lst3[0]+ lst3[1]\n",
    "        day_st_key = day_st_key + lst3[0]\n",
    "        day_st_r_key = day_st_r_key + lst3[0]+ lst3[1]\n",
    "        st_key = st_key + lst3[0]\n",
    "        pr_st_key =pr_st_key+lst3[0]\n",
    "        pr_ct_st_key = pr_ct_st_key  + lst3[0]\n",
    "        pr_ct_st_r_key = pr_ct_st_r_key +  lst3[0]+ lst3[1]\n",
    "        st_r_key = st_r_key + lst3[0]+ lst3[1] \n",
    "        pr_st_r_key = pr_st_r_key + lst3[0]+ lst3[1] \n",
    "        day_pr_st_key = day_pr_st_key + lst3[0]\n",
    "        day_pr_ct_st_key = day_pr_ct_st_key + lst3[0]\n",
    "        day_pr_st_r_key = day_pr_st_r_key + lst3[0]+ lst3[1]\n",
    "    else:\n",
    "        #all_key = all_key + lst3[0]+ lst3[1]\n",
    "        day_st_key = day_st_key + lst3[0]\n",
    "        #day_st_r_key = day_st_r_key + lst3[0]+ lst3[1]\n",
    "        st_key = st_key + lst3[0]\n",
    "        pr_st_key =pr_st_key+lst3[0]\n",
    "        pr_ct_st_key = pr_ct_st_key  + lst3[0]\n",
    "        #pr_ct_st_r_key = pr_ct_st_r_key +  lst3[0]+ lst3[1] \n",
    "        #st_r_key = st_r_key + lst3[0]+ lst3[1] \n",
    "        #pr_st_r_key = pr_st_r_key + lst3[0]+ lst3[1] \n",
    "        day_pr_st_key = day_pr_st_key + lst3[0]\n",
    "        day_pr_ct_st_key = day_pr_ct_st_key + lst3[0]\n",
    "    \n",
    "    \n",
    "    try:\n",
    "        dt_all[all_key] = dt_all[all_key] +1\n",
    "    except:\n",
    "        dt_all[all_key] = 1\n",
    "        \n",
    "    try:\n",
    "        dt_day[day_key] = dt_day[day_key]+1\n",
    "    except:\n",
    "        dt_day[day_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_day_pr[day_pr_key] = dt_day_pr[day_pr_key] +1\n",
    "    except:\n",
    "        dt_day_pr[day_pr_key] = 1\n",
    "          \n",
    "    try:\n",
    "        dt_day_pr_ct[day_pr_ct_key] = dt_day_pr_ct[day_pr_ct_key] +1\n",
    "    except:\n",
    "        dt_day_pr_ct[day_pr_ct_key] = 1\n",
    "        \n",
    "    try:\n",
    "        dt_st[st_key] = dt_st[st_key] +1\n",
    "    except:\n",
    "        dt_st[st_key] = 1\n",
    "        \n",
    "    try:\n",
    "        dt_pr[pr_key] = dt_pr[pr_key] +1\n",
    "    except:\n",
    "        dt_pr[pr_key] = 1\n",
    "            \n",
    "    try:\n",
    "        dt_day_st[day_st_key] = dt_day_st[day_st_key] +1\n",
    "    except:\n",
    "        dt_day_st[day_st_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_day_st_r[day_st_r_key] = dt_day_st_r[day_st_r_key] +1\n",
    "    except:\n",
    "        dt_day_st_r[day_st_r_key] = 1\n",
    "        \n",
    "    try:\n",
    "        dt_pr_st[pr_st_key] = dt_pr_st[pr_st_key] +1\n",
    "    except:\n",
    "        dt_pr_st[pr_st_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_pr_ct_st[pr_ct_st_key] = dt_pr_ct_st[pr_ct_st_key] +1\n",
    "    except:\n",
    "        dt_pr_ct_st[pr_ct_st_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_pr_ct_st_r[pr_ct_st_r_key] = dt_pr_ct_st_r[pr_ct_st_r_key] +1\n",
    "    except:\n",
    "        dt_pr_ct_st_r[pr_ct_st_r_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_st_r[st_r_key] = dt_st_r[st_r_key] +1\n",
    "    except:\n",
    "        dt_st_r[st_r_key] = 1\n",
    "\n",
    "    try:\n",
    "        dt_pr_st_r[pr_st_r_key] = dt_pr_st_r[pr_st_r_key] +1\n",
    "    except:\n",
    "        dt_pr_st_r[pr_st_r_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_pr_ct[pr_ct_key]  = dt_pr_ct[pr_ct_key] +1\n",
    "    except:\n",
    "        dt_pr_ct[pr_ct_key]  = 1\n",
    "        \n",
    "    try:\n",
    "        dt_day_pr_st[day_pr_st_key]  = dt_day_pr_st[day_pr_st_key] +1\n",
    "    except:\n",
    "        dt_day_pr_st[day_pr_st_key]  = 1\n",
    "    try:\n",
    "        dt_day_pr_ct_st[day_pr_ct_st_key] = dt_day_pr_ct_st[day_pr_ct_st_key]+1\n",
    "    except:\n",
    "        dt_day_pr_ct_st[day_pr_ct_st_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_day_pr_st_r[day_pr_st_r_key] = dt_day_pr_st_r[day_pr_st_r_key] +1\n",
    "    except:\n",
    "        dt_day_pr_st_r[day_pr_st_r_key] = 1\n",
    "    \n",
    "             \n",
    "        \n",
    "def fun2(lst):\n",
    "    p1 = []\n",
    "    c1 = []\n",
    "    s1 = []\n",
    "    r1 = []\n",
    "    lst1 = lst[1].split('.')\n",
    "    lst2 = lst[2].split('.')\n",
    "    \n",
    "    lst3 = lst[3].split('.')\n",
    "    #print lst3\n",
    "    if len(lst1) == 2:\n",
    "        d1 = int(lst1[0])\n",
    "        d2 = int(lst1[1])\n",
    "    else: \n",
    "        d1 = int(lst1[0])\n",
    "        d2 = int(lst1[0])\n",
    "    \n",
    "    if len(lst2) == 2:\n",
    "        p1 = int(lst2[0])\n",
    "        c1 = int(lst2[1])\n",
    "    else: \n",
    "        p1 = int(lst2[0])\n",
    "        c1 = int(-1)\n",
    "    if len(lst3) == 2:\n",
    "        s1 = int(lst3[0])\n",
    "        r1 = int(lst3[1])\n",
    "    else: \n",
    "        s1 = int(lst3[0])\n",
    "        r1 = int(-1)\n",
    "    #print d1,d2,p1,c1,s1,r1\n",
    "    func3(d1,d2,p1,c1,s1,r1)\n",
    "\n",
    "def func3(d1,d2,p1,c1,s1,r1):\n",
    "    #print d1,d2,p1,c1,s1,r1\n",
    "    ret = 0\n",
    "    #print 'l1',s1\n",
    "    if  (d1 == -1):\n",
    "            if (p1 == -1):\n",
    "                if (s1 == -1):\n",
    "                    ret = sum(dt_all.values())\n",
    "                elif (r1 ==-1):\n",
    "                    ret = dt_st.get(str(s1),0) + dt_st.get(str(-1),0)\n",
    "                else:\n",
    "                    ret = dt_st_r.get(str(s1)+str(r1),0) + dt_st_r.get(str(-1)+str(r1),0)\n",
    "            elif (c1 ==-1):\n",
    "                if (s1 == -1):\n",
    "                    ret = dt_pr.get(str(p1),0) + dt_pr.get(str(-1),0)\n",
    "                elif (r1 ==-1):\n",
    "                    ret = dt_pr_st.get(str(p1)+str(s1),0)+dt_pr_st.get(str(-1)+str(-1),0)+ dt_pr_st.get(str(-1)+str(s1),0)+dt_pr_st.get(str(p1)+str(-1),0)\n",
    "                else:\n",
    "                    ret = dt_pr_st_r.get(str(-1)+str(-1)+str(r1),0)+dt_pr_st_r.get(str(-1)+str(s1)+str(r1),0)+dt_pr_st_r.get(str(p1)+str(-1)+str(r1),0) + dt_pr_st_r.get(str(p1)+str(s1)+str(r1),0)\n",
    "            else:\n",
    "                if (s1 == -1):\n",
    "                    ret = dt_pr_ct.get(str(p1)+ str(c1),0) + dt_pr_ct.get(str(-1)+ str(c1),0)\n",
    "                elif (r1 ==-1):\n",
    "                    ret = dt_pr_ct_st[str(-1)+ str(c1)+str(-1)]+dt_pr_ct_st[str(-1)+ str(c1)+str(s1)]+dt_pr_ct_st[str(p1)+ str(c1)+str(-1)]+dt_pr_ct_st[str(p1)+ str(c1)+str(s1)]\n",
    "                else:\n",
    "                    ret = dt_pr_ct_st_r.get(str(-1)+str(c1)+str(-1)+str(r1),0)+dt_pr_ct_st_r.get(str(-1)+str(c1)+str(s1)+str(r1),0)+dt_pr_ct_st_r.get(str(p1)+str(c1)+str(-1)+str(r1),0)+dt_pr_ct_st_r.get(str(p1)+str(c1)+str(s1)+str(r1),0)\n",
    "\n",
    "                \n",
    "    elif (d1 == d2):\n",
    "        if (p1 == -1):\n",
    "            if (s1 == -1):\n",
    "                ret = dt_day.get(str(d1),0)       \n",
    "            elif (r1 ==-1):\n",
    "                ret = dt_day_st.get(str(d1)+str(s1),0) + dt_day_st.get(str(d1)+str(-1),0)\n",
    "            else:\n",
    "                ret = dt_day_st_r.get(str(d1)+str(-1)+str(r1),0)+dt_day_st_r.get(str(d1)+str(s1)+str(r1),0)\n",
    "        elif (c1 ==-1):\n",
    "            if (s1 == -1):\n",
    "                ret = dt_day_pr.get(str(d1)+str(p1),0)+dt_day_pr.get(str(d1)+str(-1),0)\n",
    "            elif (r1 ==-1):\n",
    "                ret = dt_day_pr_st.get(str(d1)+str(-1)+str(-1),0)+dt_day_pr_st.get(str(d1)+str(-1)+str(s1),0)+dt_day_pr_st.get(str(d1)+str(p1)+str(-1),0)+dt_day_pr_st.get(str(d1)+str(p1)+str(s1),0) \n",
    "            else:\n",
    "                ret = dt_day_pr_st_r.get(str(d1)+str(-1)+str(-1)+str(r1),0)+dt_day_pr_st_r.get(str(d1)+str(-1)+str(s1)+str(r1),0)+dt_day_pr_st_r.get(str(d1)+str(p1)+str(-1)+str(r1),0)+dt_day_pr_st_r.get(str(d1)+str(p1)+str(s1)+str(r1),0)\n",
    "        else:\n",
    "            if (s1 == -1):\n",
    "                ret = dt_day_pr_ct.get(str(d1)+str(-1)+ str(c1),0)+dt_day_pr_ct.get(str(d1)+str(p1)+ str(c1),0)\n",
    "            elif (r1 ==-1):\n",
    "                ret = dt_day_pr_ct_st.get(str(d1)+str(-1)+ str(c1)+str(-1),0)+dt_day_pr_ct_st.get(str(d1)+str(-1)+ str(c1)+str(s1),0)+dt_day_pr_ct_st.get(str(d1)+str(p1)+ str(c1)+str(-1),0)+dt_day_pr_ct_st.get(str(d1)+str(p1)+ str(c1)+str(s1),0)\n",
    "            else:\n",
    "                ret = dt_all.get(str(d1)+str(-1)+str(c1)+str(-1)+str(r1),0)+dt_all.get(str(d1)+str(-1)+str(c1)+str(s1)+str(r1),0)+dt_all.get(str(d1)+str(p1)+str(c1)+str(-1)+str(r1),0)+dt_all.get(str(d1)+str(p1)+str(c1)+str(s1)+str(r1),0)\n",
    "    else:\n",
    "        for i in range(d1,d2+1):\n",
    "            if (p1 == -1):\n",
    "                if (s1 == -1):\n",
    "                    ret += dt_day.get(str(i),0)       \n",
    "                elif (r1 ==-1):\n",
    "                    ret += dt_day_st.get(str(i)+str(s1),0) + dt_day_st.get(str(i)+str(-1),0)\n",
    "                else:\n",
    "                    ret += dt_day_st_r.get(str(i)+str(-1)+str(r1),0)+dt_day_st_r.get(str(i)+str(s1)+str(r1),0)\n",
    "  \n",
    "            elif (c1 ==-1):\n",
    "                if (s1 == -1):\n",
    "                    #print \n",
    "                    ret += dt_day_pr.get(str(i)+str(p1),0)+dt_day_pr.get(str(i)+str(-1),0)\n",
    "                elif (r1 ==-1):\n",
    "                    ret += dt_day_pr_st.get(str(i)+str(-1)+str(-1),0)+dt_day_pr_st.get(str(i)+str(-1)+str(s1),0)+dt_day_pr_st.get(str(i)+str(p1)+str(-1),0)+dt_day_pr_st.get(str(i)+str(p1)+str(s1),0) \n",
    "                else:\n",
    "                    ret += dt_day_pr_st_r.get(str(i)+str(-1)+str(-1)+str(r1),0)+dt_day_pr_st_r.get(str(i)+str(-1)+str(s1)+str(r1),0)+dt_day_pr_st_r.get(str(i)+str(p1)+str(-1)+str(r1),0)+dt_day_pr_st_r.get(str(i)+str(p1)+str(s1)+str(r1),0)\n",
    "            else:\n",
    "                if (s1 == -1):\n",
    "                    ret += dt_day_pr_ct.get(str(i)+str(-1)+ str(c1),0)+dt_day_pr_ct.get(str(i)+str(p1)+ str(c1),0)\n",
    "                elif (r1 ==-1):\n",
    "                    ret += dt_day_pr_ct_st.get(str(i)+str(-1)+ str(c1)+str(-1),0)+dt_day_pr_ct_st.get(str(i)+str(-1)+ str(c1)+str(s1),0)+dt_day_pr_ct_st.get(str(i)+str(p1)+ str(c1)+str(-1),0)+dt_day_pr_ct_st.get(str(i)+str(p1)+ str(c1)+str(s1),0)\n",
    "                else:\n",
    "                    ret += dt_all.get(str(i)+str(-1)+str(c1)+str(-1)+str(r1),0)+dt_all.get(str(i)+str(-1)+str(c1)+str(s1)+str(r1),0)+dt_all.get(str(i)+str(p1)+str(c1)+str(-1)+str(r1),0)+dt_all.get(str(i)+str(p1)+str(c1)+str(s1)+str(r1),0)\n",
    "   \n",
    "    print ret\n",
    "        \n",
    "            \n",
    "       \n",
    "    \n",
    "inp = int(raw_input())\n",
    "dt_all = {}\n",
    "dt_day = {}\n",
    "dt_day_pr = {}\n",
    "dt_day_pr_ct = {} \n",
    "dt_day_st = {}\n",
    "dt_day_st_r = {}\n",
    "dt_day_pr_st = {}\n",
    "dt_day_pr_ct_st = {}\n",
    "dt_day_pr_st_r = {}\n",
    "dt_pr = {}\n",
    "dt_pr_ct = {}\n",
    "dt_st = {}\n",
    "dt_pr_st = {}\n",
    "dt_pr_ct_st = {}\n",
    "dt_pr_ct_st_r = {}\n",
    "dt_st_r = {}\n",
    "dt_pr_st_r = {}\n",
    "\n",
    "\n",
    "for i in range(0,inp):\n",
    "    inp1 = raw_input()\n",
    "    lst =  inp1.split(' ')\n",
    "    if lst[0] == 'S':\n",
    "        fun1(lst)\n",
    "    else:\n",
    "        fun2(lst)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'-1-1': 1, '-13': 2, '12': 2, '2-1': 1, '23': 3}"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_pr_st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-80-57a8985a7c67>, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-80-57a8985a7c67>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    Q 1 1.2 2.5\u001b[0m\n\u001b[0m      ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "1000\n",
    "S 1 1.3 2.5\n",
    "S 1 1.2 2.6\n",
    "S 2 2 3.5\n",
    "S 2 2 3\n",
    "S 2 2 -1\n",
    "S 2 -1 -1\n",
    "S 2 -1 3.5\n",
    "S 4 -1 3.5\n",
    "S 2 2.5 3.5\n",
    "Q -1 5 20\n",
    "\n",
    "\n",
    "\n",
    "15\n",
    "Q 1 1.2 2.5\n",
    "S 1 1.3 2.5\n",
    "S 1 1.2 2.6\n",
    "Q 1 1.2 2.6\n",
    "Q 1 1.2 2\n",
    "S 2 2 3.5\n",
    "Q 2 2.3 3.5\n",
    "S 1 1.2 3.4\n",
    "Q 1 1 -1\n",
    "S 3 2.3 6.7\n",
    "S 3 2.4 6.8\n",
    "S 2 2 7.8\n",
    "Q 3 2 6.7\n",
    "Q 3 2 6\n",
    "Q 1.3 2 -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from random import randint\n",
    "for i in range(0,100):\n",
    "    d3 = randint(1, 101)\n",
    "    p3 = randint(-2, 11)\n",
    "    c3 = randint(1, 5)\n",
    "    s3 = randint(-2, 11)\n",
    "    r3 = randint(1,25)\n",
    "        \n",
    "    st1 = str('S')+ ' ' + str(d3)+ ' ' + str(p3) + '.' + str(c3)+ ' ' + str(s3) + '.' +str(r3)\n",
    "    st2 = str('S')+ ' ' + str(d3)+ ' ' + str(p3) + ' ' + str(s3) + '.' +str(r3)\n",
    "    st3 = str('S')+ ' ' + str(d3)+ ' ' + str(p3) + '.' + str(c3)+ ' ' + str(s3) \n",
    "    st4 = str('S')+ ' ' + str(d3)+ ' ' + str(p3) + ' ' + str(s3) \n",
    "    \n",
    "    fun1(st1.split(' '))\n",
    "    fun1(st2.split(' '))\n",
    "    fun1(st3.split(' '))\n",
    "    fun1(st4.split(' '))\n",
    "    \n",
    "    f1(st1.split(' '))\n",
    "    f1(st2.split(' '))\n",
    "    f1(st3.split(' '))\n",
    "    f1(st4.split(' '))\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q 58 10 7.23\n",
      "None None\n",
      "Q 95 -1 11.3\n",
      "None None\n",
      "Q 71 11 2.6\n",
      "None None\n",
      "Q 97 11 4.8\n",
      "None None\n",
      "Q 70 6 -1.21\n",
      "None None\n",
      "Q 57 8 9.4\n",
      "None None\n",
      "Q 66 1 8.5\n",
      "None None\n",
      "Q 79 4 1.8\n",
      "None None\n",
      "Q 29 9 8.12\n",
      "None None\n",
      "Q 56 6 3.6\n",
      "None None\n",
      "Q 45 1 7.21\n",
      "None None\n",
      "Q 61 3 7.21\n",
      "None None\n",
      "Q 71 4 5.24\n",
      "None None\n",
      "Q 61 7 5.22\n",
      "None None\n",
      "Q 64 0 1.14\n",
      "None None\n",
      "Q 64 6 9.6\n",
      "None None\n",
      "Q 38 4 5.21\n",
      "None None\n",
      "Q 20 6 0.17\n",
      "None None\n",
      "Q 68 5 -1.10\n",
      "None None\n",
      "Q 56 7 6.18\n",
      "None None\n",
      "Q 92 9 3.11\n",
      "None None\n",
      "Q 49 10 6.4\n",
      "None None\n",
      "Q 100 6 8.9\n",
      "None None\n",
      "Q 44 0 4.22\n",
      "None None\n",
      "Q 29 5 8.23\n",
      "None None\n",
      "Q 68 10 11.1\n",
      "None None\n",
      "Q 31 -1 2.18\n",
      "None None\n",
      "Q 3 9 11.10\n",
      "None None\n",
      "Q 19 5 10.12\n",
      "None None\n",
      "Q 93 0 5.19\n",
      "None None\n",
      "Q 54 6 10.7\n",
      "None None\n",
      "Q 13 10 10.23\n",
      "None None\n",
      "Q 61 5 6.21\n",
      "None None\n",
      "Q 81 9 0.24\n",
      "None None\n",
      "Q 52 11 3.24\n",
      "None None\n",
      "Q 76 0 7.16\n",
      "None None\n",
      "Q 2 2 11.22\n",
      "None None\n",
      "Q 14 1 11.1\n",
      "None None\n",
      "Q 32 2 5.17\n",
      "None None\n",
      "Q 13 4 10.1\n",
      "None None\n",
      "Q 73 9 8.12\n",
      "None None\n",
      "Q 15 11 11.11\n",
      "None None\n",
      "Q 97 3 5.15\n",
      "None None\n",
      "Q 100 1 7.15\n",
      "None None\n",
      "Q 53 11 9.7\n",
      "None None\n",
      "Q 14 4 4.20\n",
      "None None\n",
      "Q 94 4 7.4\n",
      "None None\n",
      "Q 56 6 9.8\n",
      "None None\n",
      "Q 68 1 5.15\n",
      "None None\n",
      "Q 7 8 3.12\n",
      "None None\n",
      "Q 72 3 8.15\n",
      "None None\n",
      "Q 63 8 3.12\n",
      "None None\n",
      "Q 65 6 0.12\n",
      "None None\n",
      "Q 55 6 2.19\n",
      "None None\n",
      "Q 80 1 10.13\n",
      "None None\n",
      "Q 91 -1 8.16\n",
      "None None\n",
      "Q 70 7 10.12\n",
      "None None\n",
      "Q 80 8 4.3\n",
      "None None\n",
      "Q 16 4 4.12\n",
      "None None\n",
      "Q 30 -1 2.22\n",
      "None None\n",
      "Q 77 2 9.6\n",
      "None None\n",
      "Q 86 8 -1.23\n",
      "None None\n",
      "Q 44 0 8.12\n",
      "None None\n",
      "Q 48 11 2.1\n",
      "None None\n",
      "Q 51 9 11.6\n",
      "None None\n",
      "Q 24 9 5.12\n",
      "None None\n",
      "Q 23 5 8.12\n",
      "None None\n",
      "Q 83 10 8.13\n",
      "None None\n",
      "Q 58 7 1.4\n",
      "None None\n",
      "Q 24 0 5.19\n",
      "None None\n",
      "Q 56 11 2.1\n",
      "None None\n",
      "Q 31 10 6.16\n",
      "None None\n",
      "Q 31 7 6.9\n",
      "None None\n",
      "Q 19 7 7.23\n",
      "None None\n",
      "Q 48 6 4.1\n",
      "None None\n",
      "Q 22 4 5.15\n",
      "None None\n",
      "Q 61 5 -1.20\n",
      "None None\n",
      "Q 101 4 5.9\n",
      "None None\n",
      "Q 83 7 11.6\n",
      "None None\n",
      "Q 81 11 2.1\n",
      "None None\n",
      "Q 66 2 9.11\n",
      "None None\n",
      "Q 35 9 -1.6\n",
      "None None\n",
      "Q 5 10 5.6\n",
      "None None\n",
      "Q 27 2 3.24\n",
      "None None\n",
      "Q 80 3 5.21\n",
      "None None\n",
      "Q 93 11 1.20\n",
      "None None\n",
      "Q 27 6 1.11\n",
      "None None\n",
      "Q 37 5 9.10\n",
      "None None\n",
      "Q 89 9 3.13\n",
      "None None\n",
      "Q 30 0 7.2\n",
      "None None\n",
      "Q 12 8 8.19\n",
      "None None\n",
      "Q 94 7 11.2\n",
      "None None\n",
      "Q 70 2 9.4\n",
      "None None\n",
      "Q 37 6 6.10\n",
      "None None\n",
      "Q 43 3 2.14\n",
      "None None\n",
      "Q 55 1 7.12\n",
      "None None\n",
      "Q 49 9 11.17\n",
      "None None\n",
      "Q 1 1 10.23\n",
      "None None\n",
      "Q 84 10 4.3\n",
      "None None\n",
      "Q 29 1 9.25\n",
      "None None\n"
     ]
    }
   ],
   "source": [
    "for i in range(0,100):\n",
    "    d3 = randint(1, 101)\n",
    "    p3 = randint(-1, 11)\n",
    "    c3 = randint(1, 5)\n",
    "    s3 = randint(-1, 11)\n",
    "    r3 = randint(1,25)\n",
    "    st1 = str('Q')+ ' ' + str(d3)+ ' ' + str(p3) + '.' + str(c3)+ ' ' + str(s3) + '.' +str(r3)\n",
    "    st2 = str('Q')+ ' ' + str(d3)+ ' ' + str(p3) + ' ' + str(s3) + '.' +str(r3)\n",
    "    st3 = str('Q')+ ' ' + str(d3)+ ' ' + str(p3) + '.' + str(c3)+ ' ' + str(s3) \n",
    "    st4 = str('Q')+ ' ' + str(d3)+ ' ' + str(p3) + ' ' + str(s3) \n",
    "    \n",
    "    print st2\n",
    "    print fun2(st2.split(' ')) ,f2(st2.split(' ')) \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Q 78 8.2 0.24'"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_day_pr.get(str(1)+str(2),0)+dt_day_pr.get(str(2)+str(2),0)+dt_day_pr.get(str(3)+str(2),0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'11': 2, '22': 2, '32': 2}"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_day_pr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'1': 3,\n",
       " '1-12': 1,\n",
       " '1-121116': 1,\n",
       " '1012': 1,\n",
       " '102': 1,\n",
       " '10263': 1,\n",
       " '11116': 1,\n",
       " '12': 2,\n",
       " '12-110': 1,\n",
       " '12-12': 1,\n",
       " '12-12-110': 1,\n",
       " '12-24': 1,\n",
       " '12-2495': 1,\n",
       " '1295': 1,\n",
       " '13': 2,\n",
       " '131021': 1,\n",
       " '1332': 1,\n",
       " '13321021': 1,\n",
       " '13612': 1,\n",
       " '1375': 1,\n",
       " '1375612': 1,\n",
       " '15': 1,\n",
       " '15020': 1,\n",
       " '152': 1,\n",
       " '152012': 1,\n",
       " '1554': 1,\n",
       " '1554020': 1,\n",
       " '16': 1,\n",
       " '16-15': 2,\n",
       " '16-15-15': 1,\n",
       " '163': 1,\n",
       " '19': 3,\n",
       " '19-16': 1,\n",
       " '1931': 1,\n",
       " '1944': 1,\n",
       " '194431': 1,\n",
       " '19516': 1,\n",
       " '1983': 1,\n",
       " '1983516': 1,\n",
       " '1992': 1,\n",
       " '1992-16': 1,\n",
       " '20': 1,\n",
       " '20013': 1,\n",
       " '2021': 1,\n",
       " '2021013': 1,\n",
       " '21': 3,\n",
       " '21104': 1,\n",
       " '2110435': 1,\n",
       " '21122': 1,\n",
       " '2135': 1,\n",
       " '2155': 1,\n",
       " '2193': 2,\n",
       " '2193122': 1,\n",
       " '219355': 1,\n",
       " '22': 1,\n",
       " '2292': 1,\n",
       " '2294': 1,\n",
       " '229492': 1,\n",
       " '23': 1,\n",
       " '2305': 1,\n",
       " '2305622': 1,\n",
       " '23622': 1,\n",
       " '24': 1,\n",
       " '24419': 1,\n",
       " '2493': 1,\n",
       " '2493419': 1,\n",
       " '25': 2,\n",
       " '25-19': 1,\n",
       " '25102': 1,\n",
       " '251021023': 1,\n",
       " '251023': 1,\n",
       " '2512': 1,\n",
       " '2512-19': 1,\n",
       " '26': 3,\n",
       " '26-14': 1,\n",
       " '26-1449': 1,\n",
       " '26115': 1,\n",
       " '2611549': 1,\n",
       " '26214': 1,\n",
       " '2649': 2,\n",
       " '2672': 1,\n",
       " '2672214': 1,\n",
       " '27': 3,\n",
       " '2702': 1,\n",
       " '270264': 1,\n",
       " '27102': 1,\n",
       " '27102115': 1,\n",
       " '27115': 1,\n",
       " '27518': 1,\n",
       " '2764': 1,\n",
       " '2784': 1,\n",
       " '2784518': 1,\n",
       " '29': 1,\n",
       " '29020': 1,\n",
       " '2994': 1,\n",
       " '2994020': 1,\n",
       " '3': 1,\n",
       " '3-16': 1,\n",
       " '31': 1,\n",
       " '31319': 1,\n",
       " '3193': 1,\n",
       " '3193319': 1,\n",
       " '33': 1,\n",
       " '33124': 1,\n",
       " '3322': 1,\n",
       " '3322124': 1,\n",
       " '35': 3,\n",
       " '35-12': 1,\n",
       " '35-12815': 1,\n",
       " '3505': 1,\n",
       " '350568': 1,\n",
       " '3532': 1,\n",
       " '3532824': 1,\n",
       " '3568': 1,\n",
       " '35815': 1,\n",
       " '35824': 1,\n",
       " '37': 2,\n",
       " '3711': 1,\n",
       " '37110': 1,\n",
       " '3711223': 1,\n",
       " '37223': 1,\n",
       " '3793': 1,\n",
       " '3793110': 1,\n",
       " '38': 1,\n",
       " '38224': 1,\n",
       " '3823': 1,\n",
       " '3823224': 1,\n",
       " '395': 1,\n",
       " '395-16': 1,\n",
       " '40': 1,\n",
       " '401024': 1,\n",
       " '40111': 1,\n",
       " '401111024': 1,\n",
       " '42': 1,\n",
       " '4285': 1,\n",
       " '428597': 1,\n",
       " '4297': 1,\n",
       " '43': 2,\n",
       " '4314': 1,\n",
       " '43614': 1,\n",
       " '4371': 1,\n",
       " '437114': 1,\n",
       " '4393': 1,\n",
       " '4393614': 1,\n",
       " '44': 1,\n",
       " '44113': 1,\n",
       " '44113822': 1,\n",
       " '44822': 1,\n",
       " '45': 2,\n",
       " '45113': 1,\n",
       " '4511318': 1,\n",
       " '4518': 1,\n",
       " '4523': 1,\n",
       " '452342': 1,\n",
       " '4542': 1,\n",
       " '47': 1,\n",
       " '47824': 1,\n",
       " '4783': 1,\n",
       " '4783824': 1,\n",
       " '48': 2,\n",
       " '481121': 1,\n",
       " '48518': 1,\n",
       " '4855': 1,\n",
       " '48551121': 1,\n",
       " '4873': 1,\n",
       " '4873518': 1,\n",
       " '5': 1,\n",
       " '50': 3,\n",
       " '50-122': 1,\n",
       " '5001': 1,\n",
       " '500128': 1,\n",
       " '50101': 1,\n",
       " '50101717': 1,\n",
       " '5021': 1,\n",
       " '5021-122': 1,\n",
       " '5028': 1,\n",
       " '50717': 1,\n",
       " '513': 1,\n",
       " '55': 3,\n",
       " '5501': 1,\n",
       " '5501913': 1,\n",
       " '55106': 1,\n",
       " '5543': 1,\n",
       " '554389': 1,\n",
       " '5589': 1,\n",
       " '55913': 1,\n",
       " '5593': 1,\n",
       " '5593106': 1,\n",
       " '56': 2,\n",
       " '5602': 1,\n",
       " '56124': 1,\n",
       " '5661': 1,\n",
       " '566102': 1,\n",
       " '5695': 1,\n",
       " '5695124': 1,\n",
       " '57': 2,\n",
       " '57-121': 1,\n",
       " '57103': 1,\n",
       " '571031110': 1,\n",
       " '571110': 1,\n",
       " '574': 1,\n",
       " '57413': 1,\n",
       " '5754': 1,\n",
       " '5754-121': 1,\n",
       " '59': 1,\n",
       " '59-15': 1,\n",
       " '59-15-19': 1,\n",
       " '59-19': 1,\n",
       " '60': 1,\n",
       " '6014': 1,\n",
       " '6082': 1,\n",
       " '608214': 1,\n",
       " '61': 2,\n",
       " '6109': 1,\n",
       " '6134': 1,\n",
       " '6134922': 1,\n",
       " '6153': 1,\n",
       " '615309': 1,\n",
       " '61922': 1,\n",
       " '62': 2,\n",
       " '62-21': 1,\n",
       " '62-2151': 1,\n",
       " '62105': 1,\n",
       " '62105211': 1,\n",
       " '62211': 1,\n",
       " '6251': 1,\n",
       " '63': 1,\n",
       " '6312': 1,\n",
       " '631249': 1,\n",
       " '6349': 1,\n",
       " '64': 3,\n",
       " '64113': 1,\n",
       " '64113816': 1,\n",
       " '64224': 1,\n",
       " '64712': 1,\n",
       " '6475': 1,\n",
       " '6475224': 1,\n",
       " '64816': 1,\n",
       " '6482': 1,\n",
       " '6482712': 1,\n",
       " '65': 1,\n",
       " '6533': 1,\n",
       " '6551': 1,\n",
       " '655133': 1,\n",
       " '67': 1,\n",
       " '67-14': 1,\n",
       " '67-141119': 1,\n",
       " '671119': 1,\n",
       " '7': 2,\n",
       " '71': 2,\n",
       " '71-12': 1,\n",
       " '71-12622': 1,\n",
       " '711011': 1,\n",
       " '7119': 1,\n",
       " '7155': 1,\n",
       " '71551011': 1,\n",
       " '71622': 1,\n",
       " '7314': 1,\n",
       " '743': 1,\n",
       " '743119': 1,\n",
       " '761': 1,\n",
       " '761314': 1,\n",
       " '77': 2,\n",
       " '77-23': 1,\n",
       " '77-23119': 1,\n",
       " '77119': 1,\n",
       " '7713': 1,\n",
       " '771386': 1,\n",
       " '7786': 1,\n",
       " '78': 1,\n",
       " '7802': 1,\n",
       " '78021116': 1,\n",
       " '781116': 1,\n",
       " '79': 1,\n",
       " '791110': 1,\n",
       " '7963': 1,\n",
       " '79631110': 1,\n",
       " '8': 1,\n",
       " '81': 1,\n",
       " '81-110': 1,\n",
       " '81111': 1,\n",
       " '81111-110': 1,\n",
       " '82': 2,\n",
       " '8233': 1,\n",
       " '8259': 1,\n",
       " '8294': 1,\n",
       " '829433': 1,\n",
       " '8295': 1,\n",
       " '829559': 1,\n",
       " '83': 2,\n",
       " '8321': 1,\n",
       " '8321421': 1,\n",
       " '83421': 1,\n",
       " '8381': 1,\n",
       " '8385': 1,\n",
       " '838581': 1,\n",
       " '84': 1,\n",
       " '841': 1,\n",
       " '841118': 1,\n",
       " '84177': 1,\n",
       " '8435': 1,\n",
       " '84351118': 1,\n",
       " '85': 2,\n",
       " '85105': 1,\n",
       " '8510558': 1,\n",
       " '85514': 1,\n",
       " '8558': 1,\n",
       " '8564': 1,\n",
       " '8564514': 1,\n",
       " '86': 1,\n",
       " '8612': 1,\n",
       " '8612821': 1,\n",
       " '86821': 1,\n",
       " '877': 1,\n",
       " '88': 2,\n",
       " '88108': 1,\n",
       " '88117': 1,\n",
       " '8834': 1,\n",
       " '8834117': 1,\n",
       " '8882': 1,\n",
       " '8882108': 1,\n",
       " '89': 1,\n",
       " '89111': 1,\n",
       " '89111321': 1,\n",
       " '89321': 1,\n",
       " '90': 2,\n",
       " '90-116': 1,\n",
       " '90103': 1,\n",
       " '9010399': 1,\n",
       " '9081': 1,\n",
       " '9081-116': 1,\n",
       " '9099': 1,\n",
       " '91': 1,\n",
       " '91710': 1,\n",
       " '9191': 1,\n",
       " '9191710': 1,\n",
       " '95': 1,\n",
       " '95-214': 1,\n",
       " '9502': 1,\n",
       " '9502-214': 1,\n",
       " '96': 2,\n",
       " '96020': 1,\n",
       " '9632': 1,\n",
       " '9632020': 1,\n",
       " '9634': 1,\n",
       " '9634922': 1,\n",
       " '96922': 1,\n",
       " '97': 1,\n",
       " '97-117': 1,\n",
       " '9733': 1,\n",
       " '9733-117': 1,\n",
       " '98': 1,\n",
       " '98-12': 1,\n",
       " '98-1287': 1,\n",
       " '9887': 1,\n",
       " '99': 1,\n",
       " '99-22': 1,\n",
       " '99-2281': 1,\n",
       " '9981': 1}"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dt_all"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'unique' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-98-5bbe4d364410>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m: name 'unique' is not defined"
     ]
    }
   ],
   "source": [
    "unique([1,1,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "def fun1(lst):\n",
    "    \n",
    "    all_key =  lst[1]\n",
    "    day_key =  lst[1]\n",
    "    day_pr_key = lst[1]\n",
    "    day_pr_ct_key = lst[1]\n",
    "    day_st_key =  lst[1] \n",
    "    day_st_r_key = lst[1]\n",
    "    pr_key = ''\n",
    "    st_key = ''\n",
    "    pr_st_key = ''\n",
    "    pr_ct_st_key = ''\n",
    "    pr_ct_st_r_key = ''\n",
    "    st_r_key = ''\n",
    "    pr_st_r_key = ''\n",
    "    pr_ct_key = ''\n",
    "    day_pr_st_key = lst[1]\n",
    "    day_pr_ct_st_key = lst[1]\n",
    "    day_pr_st_r_key = lst[1]\n",
    "    \n",
    "    lst2 = lst[2].split('.')\n",
    "    lst3 = lst[3].split('.')\n",
    "    \n",
    "    #print lst2\n",
    "    \n",
    "    if len(lst2) == 2:\n",
    "        all_key = all_key  + lst2[0]+ lst2[1] \n",
    "        day_pr_key = day_pr_key + lst2[0]\n",
    "        day_pr_ct_key = day_pr_ct_key +  lst2[0]+ lst2[1]\n",
    "        pr_key = pr_key +  lst2[0]\n",
    "        pr_st_key =pr_st_key+lst2[0]\n",
    "        pr_ct_st_key = pr_ct_st_key  + lst2[0]+ lst2[1] \n",
    "        pr_ct_st_r_key = pr_ct_st_r_key +  lst2[0]+ lst2[1] \n",
    "        pr_st_r_key = pr_st_r_key + lst2[0]\n",
    "        pr_ct_key  = pr_ct_key + lst2[0]+ lst2[1]\n",
    "        day_pr_st_key = day_pr_st_key + lst2[0]\n",
    "        day_pr_ct_st_key = day_pr_ct_st_key + lst2[0]+ lst2[1]\n",
    "        day_pr_st_r_key = day_pr_st_r_key +  lst2[0]\n",
    "    elif:\n",
    "        if (lst3!= -1):\n",
    "            dt_all_pr\n",
    "        \n",
    "    else:\n",
    "        #all_key = all_key  + lst2[0]+ lst2[1]\n",
    "        day_pr_key = day_pr_key + lst2[0]\n",
    "        #day_pr_ct_key = day_pr_ct_key +  lst2[0]+ lst2[1]\n",
    "        pr_key = pr_key +  lst2[0]\n",
    "        pr_st_key =pr_st_key+lst2[0]\n",
    "        #pr_ct_st_key = pr_ct_st_key  + lst2[0]+ lst2[1] \n",
    "        #pr_ct_st_r_key = pr_ct_st_r_key +  lst2[0]+ lst2[1] \n",
    "        pr_st_r_key = pr_st_r_key + lst2[0]\n",
    "        pr_ct_key  = pr_ct_key + lst2[0]\n",
    "        day_pr_st_key = day_pr_st_key + lst2[0]\n",
    "        day_pr_st_r_key = day_pr_st_r_key +  lst2[0]\n",
    "\n",
    "    if len(lst3) == 2:\n",
    "        all_key = all_key + lst3[0]+ lst3[1]\n",
    "        day_st_key = day_st_key + lst3[0]\n",
    "        day_st_r_key = day_st_r_key + lst3[0]+ lst3[1]\n",
    "        st_key = st_key + lst3[0]\n",
    "        pr_st_key =pr_st_key+lst3[0]\n",
    "        pr_ct_st_key = pr_ct_st_key  + lst3[0]\n",
    "        pr_ct_st_r_key = pr_ct_st_r_key +  lst3[0]+ lst3[1]\n",
    "        st_r_key = st_r_key + lst3[0]+ lst3[1] \n",
    "        pr_st_r_key = pr_st_r_key + lst3[0]+ lst3[1] \n",
    "        day_pr_st_key = day_pr_st_key + lst3[0]\n",
    "        day_pr_ct_st_key = day_pr_ct_st_key + lst3[0]\n",
    "        day_pr_st_r_key = day_pr_st_r_key + lst3[0]+ lst3[1]\n",
    "    else:\n",
    "        #all_key = all_key + lst3[0]+ lst3[1]\n",
    "        day_st_key = day_st_key + lst3[0]\n",
    "        #day_st_r_key = day_st_r_key + lst3[0]+ lst3[1]\n",
    "        st_key = st_key + lst3[0]\n",
    "        pr_st_key =pr_st_key+lst3[0]\n",
    "        pr_ct_st_key = pr_ct_st_key  + lst3[0]\n",
    "        #pr_ct_st_r_key = pr_ct_st_r_key +  lst3[0]+ lst3[1] \n",
    "        #st_r_key = st_r_key + lst3[0]+ lst3[1] \n",
    "        #pr_st_r_key = pr_st_r_key + lst3[0]+ lst3[1] \n",
    "        day_pr_st_key = day_pr_st_key + lst3[0]\n",
    "        day_pr_ct_st_key = day_pr_ct_st_key + lst3[0]\n",
    "    \n",
    "    \n",
    "    try:\n",
    "        dt_all[all_key] = dt_all[all_key] +1\n",
    "    except:\n",
    "        dt_all[all_key] = 1\n",
    "        \n",
    "    try:\n",
    "        dt_day[day_key] = dt_day[day_key]+1\n",
    "    except:\n",
    "        dt_day[day_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_day_pr[day_pr_key] = dt_day_pr[day_pr_key] +1\n",
    "    except:\n",
    "        dt_day_pr[day_pr_key] = 1\n",
    "          \n",
    "    try:\n",
    "        dt_day_pr_ct[day_pr_ct_key] = dt_day_pr_ct[day_pr_ct_key] +1\n",
    "    except:\n",
    "        dt_day_pr_ct[day_pr_ct_key] = 1\n",
    "        \n",
    "    try:\n",
    "        dt_st[st_key] = dt_st[st_key] +1\n",
    "    except:\n",
    "        dt_st[st_key] = 1\n",
    "        \n",
    "    try:\n",
    "        dt_pr[pr_key] = dt_pr[pr_key] +1\n",
    "    except:\n",
    "        dt_pr[pr_key] = 1\n",
    "            \n",
    "    try:\n",
    "        dt_day_st[day_st_key] = dt_day_st[day_st_key] +1\n",
    "    except:\n",
    "        dt_day_st[day_st_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_day_st_r[day_st_r_key] = dt_day_st_r[day_st_r_key] +1\n",
    "    except:\n",
    "        dt_day_st_r[day_st_r_key] = 1\n",
    "        \n",
    "    try:\n",
    "        dt_pr_st[pr_st_key] = dt_pr_st[pr_st_key] +1\n",
    "    except:\n",
    "        dt_pr_st[pr_st_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_pr_ct_st[pr_ct_st_key] = dt_pr_ct_st[pr_ct_st_key] +1\n",
    "    except:\n",
    "        dt_pr_ct_st[pr_ct_st_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_pr_ct_st_r[pr_ct_st_r_key] = dt_pr_ct_st_r[pr_ct_st_r_key] +1\n",
    "    except:\n",
    "        dt_pr_ct_st_r[pr_ct_st_r_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_st_r[st_r_key] = dt_st_r[st_r_key] +1\n",
    "    except:\n",
    "        dt_st_r[st_r_key] = 1\n",
    "\n",
    "    try:\n",
    "        dt_pr_st_r[pr_st_r_key] = dt_pr_st_r[pr_st_r_key] +1\n",
    "    except:\n",
    "        dt_pr_st_r[pr_st_r_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_pr_ct[pr_ct_key]  = dt_pr_ct[pr_ct_key] +1\n",
    "    except:\n",
    "        dt_pr_ct[pr_ct_key]  = 1\n",
    "        \n",
    "    try:\n",
    "        dt_day_pr_st[day_pr_st_key]  = dt_day_pr_st[day_pr_st_key] +1\n",
    "    except:\n",
    "        dt_day_pr_st[day_pr_st_key]  = 1\n",
    "    try:\n",
    "        dt_day_pr_ct_st[day_pr_ct_st_key] = dt_day_pr_ct_st[day_pr_ct_st_key]+1\n",
    "    except:\n",
    "        dt_day_pr_ct_st[day_pr_ct_st_key] = 1\n",
    "    \n",
    "    try:\n",
    "        dt_day_pr_st_r[day_pr_st_r_key] = dt_day_pr_st_r[day_pr_st_r_key] +1\n",
    "    except:\n",
    "        dt_day_pr_st_r[day_pr_st_r_key] = 1\n",
    "    \n",
    "             \n",
    "        \n",
    "def fun2(lst):\n",
    "    p1 = []\n",
    "    c1 = []\n",
    "    s1 = []\n",
    "    r1 = []\n",
    "    lst1 = lst[1].split('.')\n",
    "    lst2 = lst[2].split('.')\n",
    "    \n",
    "    lst3 = lst[3].split('.')\n",
    "    #print lst3\n",
    "    if len(lst1) == 2:\n",
    "        d1 = int(lst1[0])\n",
    "        d2 = int(lst1[1])\n",
    "    else: \n",
    "        d1 = int(lst1[0])\n",
    "        d2 = int(lst1[0])\n",
    "    \n",
    "    if len(lst2) == 2:\n",
    "        p1 = int(lst2[0])\n",
    "        c1 = int(lst2[1])\n",
    "    else: \n",
    "        p1 = int(lst2[0])\n",
    "        c1 = int(-1)\n",
    "    if len(lst3) == 2:\n",
    "        s1 = int(lst3[0])\n",
    "        r1 = int(lst3[1])\n",
    "    else: \n",
    "        s1 = int(lst3[0])\n",
    "        r1 = int(-1)\n",
    "    #print d1,d2,p1,c1,s1,r1\n",
    "    func3(d1,d2,p1,c1,s1,r1)\n",
    "\n",
    "def func3(d1,d2,p1,c1,s1,r1):\n",
    "    #print d1,d2,p1,c1,s1,r1\n",
    "    ret = 0\n",
    "    #print 'l1',s1\n",
    "    if  (d1 == -1):\n",
    "            if (p1 == -1):\n",
    "                if (s1 == -1):\n",
    "                    try:\n",
    "                        ret = sum(dt_all.values())\n",
    "                    except:\n",
    "                        ret =  0 \n",
    "                elif (r1 ==-1):\n",
    "                    try:\n",
    "                        ret = dt_st[str(s1)]\n",
    "                        #print ('l2')\n",
    "                    except:\n",
    "                        #print ('l3')\n",
    "                        ret =  0\n",
    "                else:\n",
    "                    try:\n",
    "                        ret = dt_st_r[str(s1)+str(r1)]\n",
    "                    except:\n",
    "                        ret =  0\n",
    "            elif (c1 ==-1):\n",
    "                if (s1 == -1):\n",
    "                    try:\n",
    "                        ret = dt_pr[str(p1)]\n",
    "                    except:\n",
    "                        ret =  0\n",
    "                elif (r1 ==-1):\n",
    "                    try:\n",
    "                        ret = dt_pr_st[str(p1)+str(s1)]\n",
    "                    except:\n",
    "                        ret =  0\n",
    "                else:\n",
    "                    try:\n",
    "                        ret = dt_pr_st_r[str(p1)+str(s1)+str(r1)]\n",
    "                    except:\n",
    "                        ret =  0\n",
    "            else:\n",
    "                if (s1 == -1):\n",
    "                    try:\n",
    "                        ret = dt_pr_ct[str(p1)+ str(c1)]\n",
    "                    except:\n",
    "                        ret =  0\n",
    "                elif (r1 ==-1):\n",
    "                    try:\n",
    "                        ret = dt_pr_ct_st[str(p1)+ str(c1)+str(s1)]\n",
    "                    except:\n",
    "                        ret =  0\n",
    "                else:\n",
    "                    try:\n",
    "                        ret = dt_pr_ct_st_r[str(p1)+str(c1)+str(s1)+str(r1)]\n",
    "                    except:\n",
    "                        ret =  0\n",
    "                \n",
    "    elif (d1 == d2):\n",
    "        if (p1 == -1):\n",
    "            if (s1 == -1):\n",
    "                try:\n",
    "                    ret = dt_day[str(d1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "            elif (r1 ==-1):\n",
    "                try:\n",
    "                    ret = dt_day_st[str(d1)+str(s1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "            else:\n",
    "                try:\n",
    "                    ret = dt_day_st_r[str(d1)+str(s1)+str(r1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "        elif (c1 ==-1):\n",
    "            if (s1 == -1):\n",
    "                try:\n",
    "                    ret = dt_day_pr[str(d1)+str(p1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "            elif (r1 ==-1):\n",
    "                try:\n",
    "                    ret = dt_day_pr_st[str(d1)+str(p1)+str(s1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "            else:\n",
    "                try:\n",
    "                    ret = dt_day_pr_st_r[str(d1)+str(p1)+str(s1)+str(r1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "        else:#####\n",
    "            if (s1 == -1):\n",
    "                try:\n",
    "                    ret = dt_day_pr_ct[str(d1)+str(p1)+ str(c1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "            elif (r1 ==-1):\n",
    "                try:\n",
    "                    #print \n",
    "                    ret = dt_day_pr_ct_st[str(d1)+str(p1)+ str(c1)+str(s1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "            else:\n",
    "                try:\n",
    "                    ret = dt_all[str(d1)+str(p1)+str(c1)+str(s1)+str(r1)]\n",
    "                except:\n",
    "                    ret =  0\n",
    "    else:\n",
    "        #print d1,d2\n",
    "        for i in range(d1,d2+1):\n",
    "            \n",
    "            if (p1 == -1):\n",
    "                if (s1 == -1):\n",
    "                    try:\n",
    "                        ret = ret + dt_day[str(i)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "                elif (r1 ==-1):\n",
    "                    try:\n",
    "                        ret = ret + dt_day_st[str(i)+str(s1)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "                else:\n",
    "                    try:\n",
    "                        ret = ret + dt_day_st_r[str(i)+str(s1)+str(r1)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "            elif (c1 ==-1):\n",
    "                if (s1 == -1):\n",
    "                    try:\n",
    "                        ret = ret + dt_day_pr[str(i)+str(p1)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "                elif (r1 ==-1):\n",
    "                    try:\n",
    "                        ret = ret + dt_day_pr_st[str(i)+str(p1)+str(s1)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "                else:\n",
    "                    try:\n",
    "                        ret = ret + dt_day_pr_st_r[str(i)+str(p1)+str(s1)+str(r1)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "            else:\n",
    "                if (s1 == -1):\n",
    "                    try:\n",
    "                        ret = ret + dt_day_pr_ct[str(i)+str(p1)+ str(c1)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "                elif (r1 ==-1):\n",
    "                    try:\n",
    "                        ret = ret + dt_day_pr_ct_st[str(i)+str(p1)+ str(c1)+str(s1)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "                else:\n",
    "                    try:\n",
    "                        ret = ret + dt_all[str(i)+str(p1)+str(c1)+str(s1)+str(r1)]\n",
    "                    except:\n",
    "                        ret = ret + 0 \n",
    "    print ret\n",
    "        \n",
    "            \n",
    "       \n",
    "    \n",
    "inp = int(raw_input())\n",
    "dt_all = {}\n",
    "dt_day = {}\n",
    "dt_day_pr = {}\n",
    "dt_day_pr_ct = {} \n",
    "dt_day_st = {}\n",
    "dt_day_st_r = {}\n",
    "dt_day_pr_st = {}\n",
    "dt_day_pr_ct_st = {}\n",
    "dt_day_pr_st_r = {}\n",
    "dt_pr = {}\n",
    "dt_pr_ct = {}\n",
    "dt_st = {}\n",
    "dt_pr_st = {}\n",
    "dt_pr_ct_st = {}\n",
    "dt_pr_ct_st_r = {}\n",
    "dt_st_r = {}\n",
    "dt_pr_st_r = {}\n",
    "\n",
    "dt_all_pr= {}\n",
    "dt_all_st= {}\n",
    "dt_all_pr_st ={}\n",
    "\n",
    "\n",
    "for i in range(0,inp):\n",
    "    inp1 = raw_input()\n",
    "    lst =  inp1.split(' ')\n",
    "    if lst[0] == 'S':\n",
    "        \n",
    "        fun1(lst)\n",
    "    else:\n",
    "        fun2(lst)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
